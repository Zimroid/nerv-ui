{"version":3,"sources":["Connector/Connector.module.css","DisplayedConnectors/DiagonalConnectors/DiagonalConnectors.module.css","App.module.css","SquareGrid/SquareGrid.module.css","SquareCell/SquareCell.module.css","Resistor/Resistor.module.css","Cable/Cable.module.css","DisplayedCables/OutputCables/OutputCables.module.css","SquareGrid/SquareGrid.tsx","Cable/Cable.tsx","SquareCell/SquareCell.tsx","DisplayedCables/ConnectCables/ConnectCables.tsx","DisplayedCables/InputCables/InputCables.tsx","Resistor/Resistor.tsx","DisplayedCables/OutputCables/OutputCables.tsx","DisplayedCables/DisplayedCables.tsx","Connector/Connector.tsx","DisplayedConnectors/DiagonalConnectors/DiagonalConnectors.tsx","DisplayedConnectors/HorizontalConnectors/HorizontalConnectors.tsx","DisplayedConnectors/DisplayedConnectors.tsx","useTick/useTick.ts","App.tsx","reportWebVitals.js","index.tsx"],"names":["module","exports","SquareGrid","nbColumns","nbRows","children","className","styles","gridContainer","style","grid","Cable","points","color","width","height","path","forEach","elt","x","y","arc","revert","cell","xmlns","viewBox","d","stroke","strokeWidth","fill","vectorEffect","SquareCell","cellWrapper","ConnectCables","nbCables","cableColor","cables","i","coordonnes","push","InputCables","Resistor","resistor","OutputCables","maximumRight","maximumBottom","pushCoordonneesIfPossible","coord","newPoint","res","j","xRestistor","yRestistor","outputResistorWrapper","firstArc","DisplayedCables","nbLines","gridWidth","gridHeight","cablesColor","Connector","text","id","disabled","checked","connectorColor","textColor","errorTextColor","val","useRef","inited","useEffect","current","document","getElementById","beginElement","type","connector","onChange","htmlFor","connectorDisplay","connectorDisplayLeft","connectorDisplayRight","connectorTextWrapper","connectorText","cable","href","attributeName","from","to","dur","begin","DiagonalConnectors","values","connectorsColor","useState","connectorsValues","setConnectorsValues","connectors","map","value","diffFirstResistor","diffSecondResistor","result","diagonal","resistorWrapper","HorizontalConnectors","DisplayedConnectors","nbConnectors","diagonalConnectorsInitialValues","horizontalConnectorsInitialValues","diagonalConnectorsValues","setDiagonalConnectorsValues","horizontalConnectorsValues","setHorizontalConnectorsValues","func","time","savedFunction","interval","setInterval","clearInterval","useTick","nbConnectorsToChange","Math","floor","random","randoms","Set","add","length","newValuesForDiagonalConnectors","newValuesForHorizontalConnectors","randomizeValues","App","mainColor","demoWrapper","gridWrapper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a3f05e72.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Connector_cell__2B2qL\",\"connector\":\"Connector_connector__2DdZ0\",\"connectorDisplay\":\"Connector_connectorDisplay__1W5P8\",\"connectorDisplayLeft\":\"Connector_connectorDisplayLeft__3x-Dj\",\"connectorDisplayRight\":\"Connector_connectorDisplayRight__2HDCu\",\"connectorTextWrapper\":\"Connector_connectorTextWrapper__3q7S5\",\"connectorText\":\"Connector_connectorText__3jApz\",\"inited\":\"Connector_inited__185pl\",\"blink\":\"Connector_blink__4xOpw\",\"blink2\":\"Connector_blink2__3ckmx\",\"cable\":\"Connector_cable__1FK5A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"diagonal\":\"DiagonalConnectors_diagonal__3CirE\",\"resistorWrapper\":\"DiagonalConnectors_resistorWrapper__2jRLp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"demoWrapper\":\"App_demoWrapper__23NFg\",\"gridWrapper\":\"App_gridWrapper__ywVIR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gridContainer\":\"SquareGrid_gridContainer__1Ll0_\",\"grid\":\"SquareGrid_grid__2Kdlq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cellWrapper\":\"SquareCell_cellWrapper__26luM\",\"cell\":\"SquareCell_cell__1xXeM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Resistor_cell__1w8Of\",\"resistor\":\"Resistor_resistor__1pSzK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Cable_cell__153wy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outputResistorWrapper\":\"OutputCables_outputResistorWrapper__1yGlq\"};","import styles from './SquareGrid.module.css';\n\nexport interface Props {\n    nbColumns: number;\n    nbRows: number;\n    children: React.ReactNode;\n}\n\nexport default function SquareGrid({nbColumns, nbRows, children}: Props) {\n    // TODO watch parameter to update grid ?\n    // TODO export to npm lib ?\n    // TODO replace the cast\n    return (\n        <div className={styles.gridContainer} style={{\"--nb-columns\": nbColumns, \"--nb-rows\": nbRows} as React.CSSProperties}>\n            <div className={styles.grid}>\n                {children}\n            </div>\n        </div>\n      );\n}\n","import styles from './Cable.module.css';\nimport { CablePoint } from './types';\n\nexport interface Props {\n    points: CablePoint[];\n    color?: string;\n}\n\nexport default function Cable({points, color = '#1d1d1d'}: Props) {\n    let width = 0;\n    let height = 0;\n    let path = '';\n\n    // We compute the path and the size taken by the cable depending on the given list of points\n    points.forEach(elt => {\n        if (path === '') {\n            path += `M ${elt.x * 10 + 5} ${elt.y * 10 + 5}`;\n            if (elt.x > width) {\n                width = elt.x;\n            }\n            if (elt.y > height) {\n                height = elt.y;\n            }\n        } else if (elt.arc) {\n            path += `A 1.2 1 0 0 ${elt.revert ? '1' : '0'} ${elt.x * 10 + 5} ${elt.y * 10 + 5}`;\n        } else {\n            path += `L ${elt.x * 10 + 5} ${elt.y * 10 + 5}`;\n        }\n\n        if (elt.x > width) {\n            width = elt.x;\n        }\n        if (elt.y > height) {\n            height = elt.y;\n        }\n    });\n\n    width = (width + 1) * 10;\n    height = (height + 1) * 10;\n\n    // TODO replace the cast\n    return (\n        <div className={styles.cell} style={{\"--width\": width, \"--height\": height} as React.CSSProperties}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox={`0 0 ${width} ${height}`}>\n                <path d={path} stroke={color} strokeWidth=\"2\" fill=\"none\" vectorEffect=\"non-scaling-stroke\"/>\n            </svg>\n        </div>\n      );\n}\n","import styles from './SquareCell.module.css';\n\nexport interface Props {\n    x: number;\n    y: number;\n    children: React.ReactNode;\n}\n\nexport default function SquareCell({x, y, children}: Props) {\n    // TODO replace the cast\n    return (\n        <div className={styles.cellWrapper} style={{\"--x\": x, \"--y\": y} as React.CSSProperties}>\n            <div className={styles.cell}>\n                {children}\n            </div>\n        </div>\n      );\n}\n","import Cable from \"../../Cable/Cable\";\nimport SquareCell from \"../../SquareCell/SquareCell\";\n\nexport interface Props {\n  nbCables: number,\n  cableColor?: string\n}\n\nexport default function ConnectCables({ nbCables, cableColor = 'red' }: Props) {\n\n  const cables = [];\n  for (let i = 0; i < nbCables; i++) {\n    let coordonnes = [];\n    if (i % 2 === 0) {\n      coordonnes = [\n        {x: 37 - i, y: 7 + i},\n        {x: 40 - i, y: 10 + i},\n        {x: 47 - i, y: 10 + i},\n      ];\n    } else {\n      coordonnes = [\n        {x: 36 - i, y: 6 + i},\n        {x: 40 - i, y: 10 + i},\n        {x: 44 - i, y: 10 + i},\n      ];\n    }\n    cables.push(\n      <SquareCell x={0} y={0} key={`connectCable${i}`}>\n        <Cable points={coordonnes} color={cableColor}></Cable>\n      </SquareCell>\n    )\n  }\n\n    return (<>{cables}</>);\n}","import Cable from \"../../Cable/Cable\";\nimport SquareCell from \"../../SquareCell/SquareCell\";\n\nexport interface Props {\n  nbCables: number,\n  cableColor?: string\n}\n\nexport default function InputCables({ nbCables, cableColor = 'red' }: Props) {\n\n  const cables = [];\n  for (let i = 0; i < nbCables; i++) {\n    const coordonnes = [];\n    if (i % 2 === 0) {\n        coordonnes.push(\n          {x: 0, y: i},\n          {x: 30 - i, y: i},\n          {x: 32 - i, y: 2 + i},\n        );\n    } else {\n      if ( 30 - i > 0) {\n        coordonnes.push(\n          {x: 0, y: i},\n          {x: 30 - i, y: i},\n          {x: 31 - i, y: 1 + i},\n        );\n      }\n    }\n    cables.push(\n      <SquareCell x={0} y={0} key={`inputCable${i}`}>\n        <Cable points={coordonnes} color={cableColor}></Cable>\n      </SquareCell>\n    )\n  }\n\n    return (<>{cables}</>);\n}\n","import styles from './Resistor.module.css';\n\nexport interface Props {\n    color?: string\n}\n\nexport default function Resistor({color = 'red'}: Props) {\n    // TODO replace the cast\n    return (\n        <div className={styles.cell}>\n            <div className={styles.resistor} style={{'--color': color} as React.CSSProperties}></div>\n        </div>\n      );\n}\n","import Cable from \"../../Cable/Cable\";\nimport { CablePoint } from \"../../Cable/types\";\nimport Resistor from \"../../Resistor/Resistor\";\nimport SquareCell from \"../../SquareCell/SquareCell\";\nimport styles from './OutputCables.module.css';\n\nexport interface Props {\n  nbCables: number,\n  cableColor?: string,\n  maximumRight: number,\n  maximumBottom: number\n}\n\nexport default function OutputCables({ nbCables, cableColor = 'red', maximumRight, maximumBottom }: Props) {\n  \n  const pushCoordonneesIfPossible = (coord: CablePoint[], newPoint: CablePoint) => {\n    const res = [...coord];\n    if (newPoint.x <= maximumRight - 1 && newPoint.y <= maximumBottom - 1) {\n      res.push(newPoint);\n    }\n    return res;\n  }\n\n  const cables = [];\n  for (let i = 0; i < nbCables; i++) {\n    let coordonnes: CablePoint[] = [];\n    if (i % 2 === 0) {\n      const breakpoint = 60;\n      for (let j = 54; j <= breakpoint; j++) {\n        coordonnes = pushCoordonneesIfPossible(coordonnes, {x: j - i, y: 10 + i});\n      }\n      for (let j = breakpoint; j <= 76; j++) {\n        coordonnes = pushCoordonneesIfPossible(coordonnes, {x: j - i, y: 10 + i + j - breakpoint});\n      }\n      const xRestistor = 61 - i;\n      const yRestistor = 11 + i;\n      if (xRestistor < maximumRight && yRestistor < maximumBottom) {\n        cables.push(\n          <SquareCell x={xRestistor} y={yRestistor} key={`outputCable${i}Resistor`}>\n            <div className={styles.outputResistorWrapper}>\n              <Resistor color={cableColor}></Resistor>\n            </div>\n          </SquareCell>\n        )\n      }\n    } else {\n      const firstArc = 61 - i;\n      for (let j = 51 - i; j <= firstArc; j++) {\n        coordonnes = pushCoordonneesIfPossible(coordonnes, {x: j, y: 10 + i});\n      }\n      for (let j = 0; j <= 45; j++) {\n        if (j % 4 === 0) {\n          coordonnes = pushCoordonneesIfPossible(coordonnes, {x: firstArc + 0.3 + j, y: 10 + i});\n          coordonnes = pushCoordonneesIfPossible(coordonnes, {x: firstArc + 1.4 + j, y: 10 + i, arc: true, revert: true});\n          coordonnes = pushCoordonneesIfPossible(coordonnes, {x: firstArc + 2 + j, y: 10 + i});\n        } else {\n          coordonnes = pushCoordonneesIfPossible(coordonnes, {x: firstArc + 1 + j, y: 10 + i});\n        }\n      }\n    }\n    cables.push(\n      <SquareCell x={0} y={0} key={`outputCable${i}`}>\n        <Cable points={coordonnes} color={cableColor}></Cable>\n      </SquareCell>\n    )\n  }\n\n    return (<>{cables}</>);\n}","import ConnectCables from \"./ConnectCables/ConnectCables\";\nimport InputCables from \"./InputCables/InputCables\";\nimport OutputCables from \"./OutputCables/OutputCables\";\n\nexport interface Props {\n    nbLines: number,\n    gridWidth: number,\n    gridHeight: number,\n    cablesColor?: string\n}\n\nexport default function DisplayedCables({ nbLines, gridWidth, gridHeight, cablesColor = 'red' }: Props) {\n    return (<>\n        <InputCables nbCables={nbLines} cableColor={cablesColor}></InputCables>\n        <ConnectCables nbCables={nbLines} cableColor={cablesColor}></ConnectCables>\n        <OutputCables nbCables={nbLines} cableColor={cablesColor} maximumRight={gridWidth} maximumBottom={gridHeight}></OutputCables>\n    </>);\n}\n","import { useEffect, useRef } from 'react';\nimport styles from './Connector.module.css';\n\nexport interface Props {\n    text: string;\n    id: string;\n    disabled: boolean;\n    checked: boolean;\n    connectorColor?: string;\n    textColor?: string;\n    errorTextColor?: string;\n}\n\nexport default function Connector({text, id, disabled, checked, connectorColor = 'red', textColor = 'white', errorTextColor = 'black'}: Props) {\n    const val = useRef(checked);\n    const inited = useRef(false);\n    \n    const handleInputChange = () => {\n        inited.current = true;\n        val.current = !val.current;\n    }\n\n    useEffect(() => {\n        if (val.current !== checked) {\n            inited.current = true;\n        }\n        val.current = checked;\n        if (inited.current) {\n            if (checked) {\n                // TODO : Find a way to correctly type the element in order to use \"beginElement\"\n                const svg: any = document.getElementById(`animCloseTempo${id}`) as any;\n                svg.beginElement();\n            } else {\n                const svg: any = document.getElementById(`animOpenTempo${id}`) as any;\n                svg.beginElement();\n            }\n        }\n    }, [checked, id]);\n\n    // TODO replace the cast\n    return (\n        <div className={`${styles.cell} ${inited ? styles.inited : ''}`}>\n            <input type=\"checkbox\" id={id} className={styles.connector} checked={val.current} onChange={handleInputChange} disabled={disabled}></input>\n            <label htmlFor={id}>\n                <div className={styles.connectorDisplay} style={{'--connectorColor': connectorColor} as React.CSSProperties}>\n                    <div className={styles.connectorDisplayLeft} style={{'--connectorColor': connectorColor} as React.CSSProperties}></div>\n                    <div className={styles.connectorDisplayRight} style={{'--connectorColor': connectorColor} as React.CSSProperties}></div>\n                </div>\n                <div className={styles.connectorTextWrapper} style={{'--textColor': textColor, '--errorTextColor': errorTextColor} as React.CSSProperties}>\n                    <div className={styles.connectorText}>{text}</div>\n                </div>\n                <div className={styles.cable}>\n                    {/* TODO subdivide into 2 path so we can have a different color for the left and right \"cable\" */}\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 800 100\">\n                        <path id={'cableConnector' + id} d=\"M 49 50 L 90 50 C 105 50 105 50 120 50 L 170 50 M 751 50 L 710 50 C 695 50 695 50 680 50 L 630 50\" stroke={connectorColor} strokeWidth=\"2\" fill=\"none\" vectorEffect=\"non-scaling-stroke\"/>\n                        <animate\n                            id={'animOpenTempo' + id}\n                            href={'#cableConnector' + id}\n                            attributeName=\"d\"\n                            from=   \"M 49 50 L 90 50 C 105 50 105 50 120 50 L 170 50 M 751 50 L 710 50 C 695 50 695 50 680 50 L 630 50\"\n                            to=     \"M 49 50 L 90 50 C 105 50 105 50 120 50 L 170 50 M 751 50 L 710 50 C 695 50 695 50 680 50 L 630 50\"\n                            dur=\"0.8s\"\n                            begin=\"indefinite\"/>\n                        <animate\n                            id={'animOpen' + id}\n                            href={'#cableConnector' + id}\n                            attributeName=\"d\"\n                            from=   \"M 49 50 L 90 50 C 105 50 105 50 120 50 L 170 50 M 751 50 L 710 50 C 695 50 695 50 680 50 L 630 50\"\n                            to=     \"M 49 50 L 70 50 C 85 -20 85 120 100 50 L 170 50 M 751 50 L 730 50 C 715 -20 715 120 700 50 L 630 50\"\n                            dur=\"0.2s\"\n                            begin={'animOpenTempo' + id + '.end'}\n                            fill=\"freeze\"/>\n                        <animate\n                            id={'animCloseTempo' + id}\n                            href={'#cableConnector' + id}\n                            attributeName=\"d\"\n                            from=   \"M 49 50 L 70 50 C 85 -20 85 120 100 50 L 170 50 M 751 50 L 730 50 C 715 -20 715 120 700 50 L 630 50\"\n                            to=     \"M 49 50 L 70 50 C 85 -20 85 120 100 50 L 170 50 M 751 50 L 730 50 C 715 -20 715 120 700 50 L 630 50\"\n                            dur=\"0.8s\"\n                            begin=\"indefinite\"/>\n                        <animate\n                            id={'animClose' + id}\n                            href={'#cableConnector' + id}\n                            attributeName=\"d\"\n                            from=   \"M 49 50 L 70 50 C 85 -20 85 120 100 50 L 170 50 M 751 50 L 730 50 C 715 -20 715 120 700 50 L 630 50\"\n                            to=     \"M 49 50 L 90 50 C 105 50 105 50 120 50 L 170 50 M 751 50 L 710 50 C 695 50 695 50 680 50 L 630 50\"\n                            dur=\"0.2s\"\n                            begin={'animCloseTempo' + id + '.end'}\n                            fill=\"freeze\"/>\n                    </svg>\n                </div>\n            </label>\n        </div>\n      );\n}\n","import { useEffect, useState } from \"react\";\nimport Connector from \"../../Connector/Connector\";\nimport Resistor from \"../../Resistor/Resistor\";\nimport SquareCell from \"../../SquareCell/SquareCell\";\nimport styles from './DiagonalConnectors.module.css';\n\nexport interface Props {\n  values: boolean[],\n  connectorsColor?: string,\n  textColor?: string,\n  errorTextColor?: string\n}\n\nexport default function DiagonalConnectors({ values, connectorsColor = 'red', textColor = 'white', errorTextColor = 'black' }: Props) {\n  \n  const [connectorsValues, setConnectorsValues] = useState(values);\n  \n  const connectors = connectorsValues.map((value, i) => {\n    let x = 32;\n    let y = 2;\n    let id = 123 + i;\n\n    let diffFirstResistor = -1;\n    let diffSecondResistor = 7;\n    \n    if (i % 2 === 0) {\n      x = x - i;\n      y = y + i;\n      diffFirstResistor--;\n    } else {\n      x = x - (i + 1);\n      y = y + i - 1;\n      diffSecondResistor--;\n    }\n\n    const result = [\n      <SquareCell x={x} y={y} key={`diagonalConnector${i}`}>\n        <div className={styles.diagonal}>\n          <Connector text={`00${id}`} id={`${id}`} disabled={true} checked={value} connectorColor={connectorsColor} textColor={textColor} errorTextColor={errorTextColor}></Connector>\n        </div>\n      </SquareCell>,\n      <SquareCell x={x + diffSecondResistor} y={y + diffSecondResistor} key={`diagonalConnector${i}Resistor1`}>\n        <div className={styles.resistorWrapper}>\n          <Resistor color={connectorsColor}></Resistor>\n        </div>\n      </SquareCell>\n    ];\n\n    if (x + diffFirstResistor >= 0) {\n      result.push(<SquareCell x={x + diffFirstResistor} y={y + diffFirstResistor} key={`diagonalConnector${i}Resistor2`}>\n        <div className={styles.resistorWrapper}>\n          <Resistor color={connectorsColor}></Resistor>\n        </div>\n      </SquareCell>)\n    }\n\n    return result;\n  });\n\n  useEffect(() => {\n    setConnectorsValues(values);\n  }, [values])\n\n    return (<>{connectors}</>);\n}\n","import { useEffect, useState } from \"react\";\nimport Connector from \"../../Connector/Connector\";\nimport SquareCell from \"../../SquareCell/SquareCell\";\n\nexport interface Props {\n  values: boolean[],\n  connectorsColor?: string,\n  textColor?: string,\n  errorTextColor?: string\n}\n\nexport default function HorizontalConnectors({ values, connectorsColor = 'red', textColor = 'white', errorTextColor = 'black' }: Props) {\n  \n  const [connectorsValues, setConnectorsValues] = useState(values);\n  \n  const connectors = connectorsValues.map((value, i) => {\n    let x = 46;\n    let y = 10;\n    let id = 223 + i;\n    if (i % 2 === 0) {\n      x = x + 1 - i;\n      y = y + i;\n    } else {\n      x = x - (i + 2);\n      y = y + i;\n    }\n    return <SquareCell x={x} y={y} key={`HorizontalConnectors${i}`}>\n      <Connector text={`00${id}`} id={`${id}`} disabled={true} checked={value} connectorColor={connectorsColor} textColor={textColor} errorTextColor={errorTextColor}></Connector>\n    </SquareCell>\n  });\n\n  useEffect(() => {\n    setConnectorsValues(values);\n  }, [values])\n\n    return (<>{connectors}</>);\n}\n","import { useState } from \"react\";\nimport useTick from \"../useTick/useTick\";\nimport DiagonalConnectors from \"./DiagonalConnectors/DiagonalConnectors\";\nimport HorizontalConnectors from \"./HorizontalConnectors/HorizontalConnectors\";\n\nexport interface Props {\n  nbConnectors: number,\n  connectorsColor?: string,\n  textColor?: string,\n  errorTextColor?: string\n}\n\nexport default function DisplayedConnectors({ nbConnectors, connectorsColor = 'red', textColor = 'white', errorTextColor = 'black' }: Props) {\n    let diagonalConnectorsInitialValues: boolean[] = [];\n    for (let i = 0; i < nbConnectors; i++) {\n      diagonalConnectorsInitialValues.push(true);\n    }\n    let horizontalConnectorsInitialValues: boolean[] = [...diagonalConnectorsInitialValues];\n\n    const [diagonalConnectorsValues, setDiagonalConnectorsValues] = useState(diagonalConnectorsInitialValues); \n    const [horizontalConnectorsValues, setHorizontalConnectorsValues] = useState(horizontalConnectorsInitialValues);\n    \n    const randomizeValues = () => {\n      const nbConnectorsToChange = Math.floor(Math.random() * 4);\n      const randoms: Set<number> = new Set();\n      for (let i = 0; i <= nbConnectorsToChange; i++) {\n        randoms.add(Math.floor(Math.random() * (diagonalConnectorsInitialValues.length + horizontalConnectorsInitialValues.length)));\n      }\n      const newValuesForDiagonalConnectors = [...diagonalConnectorsValues];\n      const newValuesForHorizontalConnectors = [...horizontalConnectorsValues];\n      randoms.forEach(random => {\n        if (random < diagonalConnectorsInitialValues.length) {\n          newValuesForDiagonalConnectors[random] = !newValuesForDiagonalConnectors[random];\n        } else {\n          newValuesForHorizontalConnectors[random - diagonalConnectorsInitialValues.length] = !newValuesForHorizontalConnectors[random - diagonalConnectorsInitialValues.length];\n        }\n      });\n      setDiagonalConnectorsValues(newValuesForDiagonalConnectors);\n      setHorizontalConnectorsValues(newValuesForHorizontalConnectors);\n    }\n\n    useTick(() => {\n      randomizeValues();\n    }, 400);\n\n    return (<>\n      <DiagonalConnectors values={diagonalConnectorsValues} connectorsColor={connectorsColor} textColor={textColor} errorTextColor={errorTextColor}></DiagonalConnectors>\n      <HorizontalConnectors values={horizontalConnectorsValues} connectorsColor={connectorsColor} textColor={textColor} errorTextColor={errorTextColor}></HorizontalConnectors>\n    </>);\n}\n","import { useEffect, useRef } from 'react';\n\nexport default function useTick(func: () => void, time: number) {\n    const savedFunction = useRef(() => {});\n    useEffect(() => {\n      savedFunction.current = func;\n    })\n  \n    useEffect(() => {\n      const interval = setInterval(() => { savedFunction.current(); }, time);\n      return () => clearInterval(interval);\n    }, [time]);\n  \n    return null;\n  }\n\n\n\n","\nimport './App.css';\nimport styles from './App.module.css';\nimport SquareGrid from './SquareGrid/SquareGrid';\nimport DisplayedCables from './DisplayedCables/DisplayedCables';\nimport DisplayedConnectors from './DisplayedConnectors/DisplayedConnectors';\n\nexport default function App() {\n  const gridWidth = 55;\n  const gridHeight = 50;\n  const nbLine = 33;\n  const mainColor = '#1d1d1d';\n  const textColor = '#70ffe7';\n  const errorTextColor = '#ff4242';\n\n  return (\n    <div className={styles.demoWrapper}>\n      <div className={styles.gridWrapper}>\n        <SquareGrid nbColumns={gridWidth} nbRows={gridHeight}>\n          <DisplayedCables nbLines={nbLine} cablesColor={mainColor} gridWidth={gridWidth} gridHeight={gridHeight}></DisplayedCables>\n          <DisplayedConnectors nbConnectors={nbLine} connectorsColor={mainColor} textColor={textColor} errorTextColor={errorTextColor}></DisplayedConnectors>\n        </SquareGrid>\n      </div>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}